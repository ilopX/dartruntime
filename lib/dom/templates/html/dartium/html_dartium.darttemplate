// Copyright (c) 2012, the Dart project authors.  Please see the AUTHORS file
// for details. All rights reserved. Use of this source code is governed by a
// BSD-style license that can be found in the LICENSE file.

// DO NOT EDIT
// Auto-generated dart:html library.

#library("html");

#import("dart:isolate");
#import("dart:nativewrappers");

$!GENERATED_DART_FILES

#source('$AUXILIARY_DIR/EventListener.dart');
#source('$AUXILIARY_DIR/KeyLocation.dart');
#source('$AUXILIARY_DIR/KeyName.dart');
#source('$AUXILIARY_DIR/ReadyState.dart');
#source('$AUXILIARY_DIR/_Collections.dart');
#source('$AUXILIARY_DIR/_XMLHttpRequestUtils.dart');
#source('$AUXILIARY_DIR/../../html/src/shared_FactoryProviders.dart');
#source('$AUXILIARY_DIR/../../html/src/dartium_FactoryProviders.dart');
#source('$AUXILIARY_DIR/../../html/src/Measurement.dart');
#source('$AUXILIARY_DIR/../../html/src/Device.dart');
#source('$AUXILIARY_DIR/../../html/src/_Testing.dart');
#source('$AUXILIARY_DIR/../../html/src/_DOMTypeBase.dart');
#source('$AUXILIARY_DIR/_ListIterators.dart');
#source('$AUXILIARY_DIR/_Lists.dart');

#source('$AUXILIARY_DIR/native_DOMWrapperBase.dart');
#source('$AUXILIARY_DIR/native_DOMPublic.dart');
#source('$AUXILIARY_DIR/native_DOMImplementation.dart');

_WindowImpl __window;
_DocumentImpl __document;

void _initialize() {
  __window = _wrap(_Utils.window());
  __document = _wrap(_Utils.window().document);
}

Window get window() {
  if (__window == null) {
    _initialize();
  }
  return __window;
}

Document get document() {
  if (__document == null) {
    _initialize();
  }
  return __document;
}

_WindowImpl get _window() {
  if (__window == null) {
    _initialize();
  }
  return __window;
}

_DocumentImpl get _document() {
  if (__document == null) {
    _initialize();
  }
  return __document;
}

_unwrap(raw) {
  return raw is _DOMTypeBase ? raw._ptr : raw;
}

// Warning: does not attempt wrap event listeners.
_wrap(raw) {
  if (raw is! _DOMWrapperBase) return raw;
  _DOMWrapperBase domObject = raw;
  if (domObject.dartObjectLocalStorage != null)
    return domObject.dartObjectLocalStorage;
  switch(domObject.typeName) {
    case 'HTMLElement':
      return new _UnknownElementImpl._wrap(domObject);
$WRAPCASES
    case 'HTMLDocument':
      return new _DocumentImpl._wrap(domObject);
    default:
      throw 'Unrecognized object $domObject. Name=${domObject.typeName}';
  }
}
