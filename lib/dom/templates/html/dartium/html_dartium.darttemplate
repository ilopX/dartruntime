// Copyright (c) 2012, the Dart project authors.  Please see the AUTHORS file
// for details. All rights reserved. Use of this source code is governed by a
// BSD-style license that can be found in the LICENSE file.

// DO NOT EDIT
// Auto-generated dart:html library.

#library("html");

#import("dart:isolate");
#import("dart:json");
#import("dart:nativewrappers");

$!GENERATED_DART_FILES

#source('$AUXILIARY_DIR/EventListener.dart');
#source('$AUXILIARY_DIR/KeyLocation.dart');
#source('$AUXILIARY_DIR/KeyName.dart');
#source('$AUXILIARY_DIR/ReadyState.dart');
#source('$AUXILIARY_DIR/_Collections.dart');
#source('$AUXILIARY_DIR/_XMLHttpRequestUtils.dart');
#source('$AUXILIARY_DIR/../../html/src/shared_FactoryProviders.dart');
#source('$AUXILIARY_DIR/../../html/src/dartium_FactoryProviders.dart');
#source('$AUXILIARY_DIR/../../html/src/IDBOpenDBRequest.dart');
#source('$AUXILIARY_DIR/../../html/src/Measurement.dart');
#source('$AUXILIARY_DIR/../../html/src/Device.dart');
#source('$AUXILIARY_DIR/../../html/src/_Testing.dart');
#source('$AUXILIARY_DIR/_ListIterators.dart');
#source('$AUXILIARY_DIR/_Lists.dart');
#source('$AUXILIARY_DIR/../../isolate/serialization.dart');

#source('$AUXILIARY_DIR/native_DOMPublic.dart');
#source('$AUXILIARY_DIR/native_DOMImplementation.dart');

Window __window;

Window get window() {
  if (__window !== null) {
    return __window;
  }
  __window = _Utils.window();
  return __window;
}

Window get _window() native "Utils_window";

Document __document;

Document get document() {
  if (__document !== null) {
    return __document;
  }
  __document = _document;
  return __document;
}

Document get _document() => _window.document;

Element query(String selector) => _document.query(selector);
ElementList queryAll(String selector) => _document.queryAll(selector);

class _Null {
  const _Null();
}

final _null = const _Null();

// TODO(vsm): Move this to a separate Isolates.dart file.
_serialize(var message) {
  // TODO(kasperl): Specialize the serializer.
  return new _Serializer().traverse(message);
}

_deserialize(var message) {
  return new _JsDeserializer().deserialize(message);
}

class _JsDeserializer extends _Deserializer {

  deserializeSendPort(List x) {
    num id = x[1];
    return new _JsSendPortSync(id);
  }

}

class _JsSendPortSync implements SendPortSync {

  static bool initialized = false;
  static var lastResult = null;

  num _id;
  _JsSendPortSync(this._id) {
    if (initialized) return;
    window.on['js-result'].add((event) {
      lastResult = JSON.parse(event.data);
    }, false);
    initialized = true;
  }

  callSync(var message) {
    var serialized = _serialize(message);
    var result = _callUsingEvent(_id, serialized);
    return _deserialize(result);
  }

  static _callUsingEvent(num id, var message) {
    var data = JSON.stringify({ 'id': id, 'message': message });
    var event = document.$dom_createEvent('TextEvent');
    event.initTextEvent('js-sync-message', false, false, window, data);
    assert(lastResult == null);
    window.$dom_dispatchEvent(event);
    var result = lastResult;
    lastResult = null;
    return result;
  }

}
